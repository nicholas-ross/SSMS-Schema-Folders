<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PropertyCategorySchemaFolderOptionsActive" xml:space="preserve">
    <value>Aktivieren</value>
  </data>
  <data name="PropertyCategorySchemaFolderOptionsFolderDisplayOptions" xml:space="preserve">
    <value>Anzeigeoptionen für Ordner</value>
  </data>
  <data name="PropertyCategorySchemaFolderOptionsFolderLevel1" xml:space="preserve">
    <value>Ordnerebene 1</value>
  </data>
  <data name="PropertyCategorySchemaFolderOptionsFolderLevel2" xml:space="preserve">
    <value>Ordnerebene 2</value>
  </data>
  <data name="PropertyCategorySchemaFolderOptionsObjectDisplayOptions" xml:space="preserve">
    <value>Anzeigeoptionen für Objekte</value>
  </data>
  <data name="PropertyCategorySchemaFolderOptionsPerformance" xml:space="preserve">
    <value>Leistung</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsAppendDot" xml:space="preserve">
    <value>Fügt einen Punkt nach dem Schema für den Namen des Ordners an.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsCloneParentNode" xml:space="preserve">
    <value>Erzeugt den Ordnerknoten anhand des übergeordneten Knotens als Vorlage. Die Eigenschaften des übergeordneten Knotens (z.B. Kontextmenü) wird übernommen.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsEnabled" xml:space="preserve">
    <value>Aktiviert das Gruppieren von SQL Objekten (Tabellen, Views, etc.) in Ordner mit dem Namen des Schemas im Objekt Explorer.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsLevel1FolderType" xml:space="preserve">
    <value>Die Art der Sortierung, die zum Erstellen der Ordner verwendet werden soll.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsLevel1MinNodeCount" xml:space="preserve">
    <value>Sortieren Sie Knoten nur dann in Ordner, wenn sie mindestens so viele Knoten enthalten.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsLevel1Regex" xml:space="preserve">
    <value>Das für die Gruppierung zu verwendende Regex-Muster. Wird nur verwendet, wenn Ordnertyp Regex ist.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsLevel1GroupNonMatchingAsOther" xml:space="preserve">
    <value>Gruppieren Sie Elemente, die nicht mit dem Regex übereinstimmen, in einem Ordner namens "Andere". Wird nur verwendet, wenn Ordnertyp Regex ist.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsLevel2FolderType" xml:space="preserve">
    <value>Die Art der Sortierung, die zum Erstellen der Ordner verwendet werden soll.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsLevel2MinNodeCount" xml:space="preserve">
    <value>Sortieren Sie Knoten nur dann in Ordner, wenn sie mindestens so viele Knoten enthalten.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsLevel2Regex" xml:space="preserve">
    <value>Das für die Gruppierung zu verwendende Regex-Muster. Wird nur verwendet, wenn Ordnertyp Regex ist.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsLevel2GroupNonMatchingAsOther" xml:space="preserve">
    <value>Gruppieren Sie Elemente, die nicht mit dem Regex übereinstimmen, in einem Ordner namens "Andere". Wird nur verwendet, wenn Ordnertyp Regex ist.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsQuickSchema" xml:space="preserve">
    <value>Mindestknotenzahl erforderlich, bevor eine schnellere, aber ungenaue Methode zum Abrufen des Schemas verwendet werden kann. Null = deaktiviert.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsRenameNode" xml:space="preserve">
    <value>Entfernt den Namen des Schemas aus dem Namen des Objektknotens.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsUnresponsiveTimeout" xml:space="preserve">
    <value>Millisekunden. Durch Erhöhen erfolgt die Aktualisierung schneller, es erfolgt jedoch eine geringere Reaktionsfähigkeit.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsUseClear" xml:space="preserve">
    <value>Für die Verwendung der schnelleren Methode ist eine Mindestknotenanzahl erforderlich, die jedoch während der Aktualisierung nicht reagiert. Null = deaktiviert.</value>
  </data>
  <data name="PropertyDescriptionSchemaFolderOptionsUseObjectIcon" xml:space="preserve">
    <value>Aktiviert das Verwenden des Icons des letzten Elements im Knoten des Schemaordners. Ansonsten wird das Icon des übergeordneten Knotens übernommen.</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsAppendDot" xml:space="preserve">
    <value>Punkt anhängen</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsCloneParentNode" xml:space="preserve">
    <value>Elternknoten duplizieren</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsEnabled" xml:space="preserve">
    <value>Aktiviert</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsLevel1FolderType" xml:space="preserve">
    <value>Ordnertyp</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsLevel1MinNodeCount" xml:space="preserve">
    <value>Mindestknotenanzahl</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsLevel1Regex" xml:space="preserve">
    <value>Regex-Muster</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsLevel1GroupNonMatchingAsOther" xml:space="preserve">
    <value>Nicht übereinstimmende als "Andere" gruppieren</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsLevel2FolderType" xml:space="preserve">
    <value>Ordnertyp</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsLevel2MinNodeCount" xml:space="preserve">
    <value>Mindestknotenanzahl</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsLevel2Regex" xml:space="preserve">
    <value>Regex-Muster</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsLevel2GroupNonMatchingAsOther" xml:space="preserve">
    <value>Nicht übereinstimmende als "Andere" gruppieren</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsQuickSchema" xml:space="preserve">
    <value>Schnelles Schema aus Knotentext</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsRenameNode" xml:space="preserve">
    <value>Knoten umbenennen</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsUnresponsiveTimeout" xml:space="preserve">
    <value>Zeitüberschreitung bei fehlender Reaktion</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsUseClear" xml:space="preserve">
    <value>Verwenden Sie Nodes.Clear</value>
  </data>
  <data name="PropertyDisplayNameSchemaFolderOptionsUseObjectIcon" xml:space="preserve">
    <value>Icon des Objektes benutzen</value>
  </data>
</root>